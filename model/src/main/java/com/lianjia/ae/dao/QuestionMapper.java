package com.lianjia.ae.dao;

import com.lianjia.ae.model.Question;
import com.lianjia.ae.model.Question;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface QuestionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int countByExample(Question example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int deleteByExample(Question example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    @Delete({
        "delete from question",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    @Insert({
        "insert into question (ID, CITY_CODE, ",
        "CLASS_ID, REPEAT, ENVIRONMENT, ",
        "ENVIRONMENT_EXTEND1, ENVIRONMENT_EXTEND2, ",
        "TITLE, CONTENT, ",
        "IMG_URL, STATUS, ",
        "CREATE_UCID, CREATE_NAME, ",
        "ORG_CODE, ORG_NAME, ",
        "CREATE_TIME, RECEIVE_TIME, ",
        "REPLY_TIME, RESOLVED, ",
        "WARN_COUNT, WARN_TIME, ",
        "LAST_QUESTION_FLOW_ID, UPDATE_UCID, ",
        "UPDATE_TIME)",
        "values (#{id,jdbcType=BIGINT}, #{cityCode,jdbcType=INTEGER}, ",
        "#{classId,jdbcType=BIGINT}, #{repeat,jdbcType=BIGINT}, #{environment,jdbcType=VARCHAR}, ",
        "#{environmentExtend1,jdbcType=VARCHAR}, #{environmentExtend2,jdbcType=VARCHAR}, ",
        "#{title,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, ",
        "#{imgUrl,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, ",
        "#{createUcid,jdbcType=BIGINT}, #{createName,jdbcType=VARCHAR}, ",
        "#{orgCode,jdbcType=BIGINT}, #{orgName,jdbcType=VARCHAR}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{receiveTime,jdbcType=BIGINT}, ",
        "#{replyTime,jdbcType=BIGINT}, #{resolved,jdbcType=INTEGER}, ",
        "#{warnCount,jdbcType=INTEGER}, #{warnTime,jdbcType=TIMESTAMP}, ",
        "#{lastQuestionFlowId,jdbcType=BIGINT}, #{updateUcid,jdbcType=BIGINT}, ",
        "#{updateTime,jdbcType=TIMESTAMP})"
    })
    int insert(Question record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int insertSelective(Question record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    List<Question> selectByExample(Question example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, CITY_CODE, CLASS_ID, REPEAT, ENVIRONMENT, ENVIRONMENT_EXTEND1, ENVIRONMENT_EXTEND2, ",
        "TITLE, CONTENT, IMG_URL, STATUS, CREATE_UCID, CREATE_NAME, ORG_CODE, ORG_NAME, ",
        "CREATE_TIME, RECEIVE_TIME, REPLY_TIME, RESOLVED, WARN_COUNT, WARN_TIME, LAST_QUESTION_FLOW_ID, ",
        "UPDATE_UCID, UPDATE_TIME",
        "from question",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    Question selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") Question record, @Param("example") Question example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") Question record, @Param("example") Question example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Question record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbggenerated
     */
    @Update({
        "update question",
        "set CITY_CODE = #{cityCode,jdbcType=INTEGER},",
          "CLASS_ID = #{classId,jdbcType=BIGINT},",
          "REPEAT = #{repeat,jdbcType=BIGINT},",
          "ENVIRONMENT = #{environment,jdbcType=VARCHAR},",
          "ENVIRONMENT_EXTEND1 = #{environmentExtend1,jdbcType=VARCHAR},",
          "ENVIRONMENT_EXTEND2 = #{environmentExtend2,jdbcType=VARCHAR},",
          "TITLE = #{title,jdbcType=VARCHAR},",
          "CONTENT = #{content,jdbcType=VARCHAR},",
          "IMG_URL = #{imgUrl,jdbcType=VARCHAR},",
          "STATUS = #{status,jdbcType=INTEGER},",
          "CREATE_UCID = #{createUcid,jdbcType=BIGINT},",
          "CREATE_NAME = #{createName,jdbcType=VARCHAR},",
          "ORG_CODE = #{orgCode,jdbcType=BIGINT},",
          "ORG_NAME = #{orgName,jdbcType=VARCHAR},",
          "CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},",
          "RECEIVE_TIME = #{receiveTime,jdbcType=BIGINT},",
          "REPLY_TIME = #{replyTime,jdbcType=BIGINT},",
          "RESOLVED = #{resolved,jdbcType=INTEGER},",
          "WARN_COUNT = #{warnCount,jdbcType=INTEGER},",
          "WARN_TIME = #{warnTime,jdbcType=TIMESTAMP},",
          "LAST_QUESTION_FLOW_ID = #{lastQuestionFlowId,jdbcType=BIGINT},",
          "UPDATE_UCID = #{updateUcid,jdbcType=BIGINT},",
          "UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Question record);
}